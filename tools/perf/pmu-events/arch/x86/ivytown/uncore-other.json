[
    {
        "BriefDescription": "Address Match (Conflict) Count; Conflict Merges",
        "Counter": "0,1",
        "EventCode": "0x17",
        "EventName": "UNC_I_ADDRESS_MATCH.MERGE_COUNT",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when an inbound write (from a device to memory or another device) had an address match with another request in the write cache.; When two requests to the same address from the same source are received back to back, it is possible to merge the two of them together.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Address Match (Conflict) Count; Conflict Stalls",
        "Counter": "0,1",
        "EventCode": "0x17",
        "EventName": "UNC_I_ADDRESS_MATCH.STALL_COUNT",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when an inbound write (from a device to memory or another device) had an address match with another request in the write cache.; When it is not possible to merge two conflicting requests, a stall event occurs.  This is bad for performance.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Write Ack Pending Occupancy; Any Source",
        "Counter": "0,1",
        "EventCode": "0x14",
        "EventName": "UNC_I_CACHE_ACK_PENDING_OCCUPANCY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of writes that have acquired ownership but have not yet returned their data to the uncore.  These writes are generally queued up in the switch trying to get to the head of their queues so that they can post their data.  The queue occuapancy increments when the ACK is received, and decrements when either the data is returned OR a tickle is received and ownership is released.  Note that a single tickle can result in multiple decrements.; Tracks only those requests that come from the port specified in the IRP_PmonFilter.OrderingQ register.  This register allows one to select one specific queue.  It is not possible to monitor multiple queues at a time.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Write Ack Pending Occupancy; Select Source",
        "Counter": "0,1",
        "EventCode": "0x14",
        "EventName": "UNC_I_CACHE_ACK_PENDING_OCCUPANCY.SOURCE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of writes that have acquired ownership but have not yet returned their data to the uncore.  These writes are generally queued up in the switch trying to get to the head of their queues so that they can post their data.  The queue occuapancy increments when the ACK is received, and decrements when either the data is returned OR a tickle is received and ownership is released.  Note that a single tickle can result in multiple decrements.; Tracks all requests from any source port.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outstanding Write Ownership Occupancy; Any Source",
        "Counter": "0,1",
        "EventCode": "0x13",
        "EventName": "UNC_I_CACHE_OWN_OCCUPANCY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of writes (and write prefetches) that are outstanding in the uncore trying to acquire ownership in each cycle.  This can be used with the write transaction count to calculate the average write latency in the uncore.  The occupancy increments when a write request is issued, and decrements when the data is returned.; Tracks all requests from any source port.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outstanding Write Ownership Occupancy; Select Source",
        "Counter": "0,1",
        "EventCode": "0x13",
        "EventName": "UNC_I_CACHE_OWN_OCCUPANCY.SOURCE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of writes (and write prefetches) that are outstanding in the uncore trying to acquire ownership in each cycle.  This can be used with the write transaction count to calculate the average write latency in the uncore.  The occupancy increments when a write request is issued, and decrements when the data is returned.; Tracks only those requests that come from the port specified in the IRP_PmonFilter.OrderingQ register.  This register allows one to select one specific queue.  It is not possible to monitor multiple queues at a time.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outstanding Read Occupancy; Any Source",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_I_CACHE_READ_OCCUPANCY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of reads that are outstanding in the uncore in each cycle.  This can be used with the read transaction count to calculate the average read latency in the uncore.  The occupancy increments when a read request is issued, and decrements when the data is returned.; Tracks all requests from any source port.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outstanding Read Occupancy; Select Source",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_I_CACHE_READ_OCCUPANCY.SOURCE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of reads that are outstanding in the uncore in each cycle.  This can be used with the read transaction count to calculate the average read latency in the uncore.  The occupancy increments when a read request is issued, and decrements when the data is returned.; Tracks only those requests that come from the port specified in the IRP_PmonFilter.OrderingQ register.  This register allows one to select one specific queue.  It is not possible to monitor multiple queues at a time.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Total Write Cache Occupancy; Any Source",
        "Counter": "0,1",
        "EventCode": "0x12",
        "EventName": "UNC_I_CACHE_TOTAL_OCCUPANCY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of reads and writes that are outstanding in the uncore in each cycle.  This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.; Tracks all requests from any source port.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Total Write Cache Occupancy; Select Source",
        "Counter": "0,1",
        "EventCode": "0x12",
        "EventName": "UNC_I_CACHE_TOTAL_OCCUPANCY.SOURCE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of reads and writes that are outstanding in the uncore in each cycle.  This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.; Tracks only those requests that come from the port specified in the IRP_PmonFilter.OrderingQ register.  This register allows one to select one specific queue.  It is not possible to monitor multiple queues at a time.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outstanding Write Occupancy; Any Source",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_I_CACHE_WRITE_OCCUPANCY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of writes (and write prefetches)  that are outstanding in the uncore in each cycle.  This can be used with the transaction count event to calculate the average latency in the uncore.  The occupancy increments when the ownership fetch/prefetch is issued, and decrements the data is returned to the uncore.; Tracks all requests from any source port.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outstanding Write Occupancy; Select Source",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_I_CACHE_WRITE_OCCUPANCY.SOURCE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of writes (and write prefetches)  that are outstanding in the uncore in each cycle.  This can be used with the transaction count event to calculate the average latency in the uncore.  The occupancy increments when the ownership fetch/prefetch is issued, and decrements the data is returned to the uncore.; Tracks only those requests that come from the port specified in the IRP_PmonFilter.OrderingQ register.  This register allows one to select one specific queue.  It is not possible to monitor multiple queues at a time.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Clocks in the IRP",
        "Counter": "0,1",
        "EventName": "UNC_I_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Number of clocks in the IRP.",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0xb",
        "EventName": "UNC_I_RxR_AK_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the AK Ingress is full.  This queue is where the IRP receives responses from R2PCIe (the ring).",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "AK Ingress Occupancy",
        "Counter": "0,1",
        "EventCode": "0xa",
        "EventName": "UNC_I_RxR_AK_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the AK Ingress.  This queue is where the IRP receives responses from R2PCIe (the ring).",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0xc",
        "EventName": "UNC_I_RxR_AK_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the AK Ingress in each cycles.  This queue is where the IRP receives responses from R2PCIe (the ring).",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0x4",
        "EventName": "UNC_I_RxR_BL_DRS_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "BL Ingress Occupancy - DRS",
        "Counter": "0,1",
        "EventCode": "0x1",
        "EventName": "UNC_I_RxR_BL_DRS_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0x7",
        "EventName": "UNC_I_RxR_BL_DRS_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0x5",
        "EventName": "UNC_I_RxR_BL_NCB_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "BL Ingress Occupancy - NCB",
        "Counter": "0,1",
        "EventCode": "0x2",
        "EventName": "UNC_I_RxR_BL_NCB_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0x8",
        "EventName": "UNC_I_RxR_BL_NCB_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0x6",
        "EventName": "UNC_I_RxR_BL_NCS_CYCLES_FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "BL Ingress Occupancy - NCS",
        "Counter": "0,1",
        "EventCode": "0x3",
        "EventName": "UNC_I_RxR_BL_NCS_INSERTS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "Counter": "0,1",
        "EventCode": "0x9",
        "EventName": "UNC_I_RxR_BL_NCS_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Tickle Count; Ownership Lost",
        "Counter": "0,1",
        "EventCode": "0x16",
        "EventName": "UNC_I_TICKLES.LOST_OWNERSHIP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of tickles that are received.  This is for both explicit (from Cbo) and implicit (internal conflict) tickles.; Tracks the number of requests that lost ownership as a result of a tickle.  When a tickle comes in, if the request is not at the head of the queue in the switch, then that request as well as any requests behind it in the switch queue will lose ownership and have to re-acquire it later when they get to the head of the queue.  This will therefore track the number of requests that lost ownership and not just the number of tickles.",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Tickle Count; Data Returned",
        "Counter": "0,1",
        "EventCode": "0x16",
        "EventName": "UNC_I_TICKLES.TOP_OF_QUEUE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of tickles that are received.  This is for both explicit (from Cbo) and implicit (internal conflict) tickles.; Tracks the number of cases when a tickle was received but the requests was at the head of the queue in the switch.  In this case, data is returned rather than releasing ownership.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count: Read Prefetches",
        "Counter": "0,1",
        "EventCode": "0x15",
        "EventName": "UNC_I_TRANSACTIONS.PD_PREFETCHES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Read Prefetches",
        "Counter": "0,1",
        "EventCode": "0x15",
        "EventName": "UNC_I_TRANSACTIONS.RD_PREFETCHES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks the number of read prefetches.",
        "UMask": "0x4",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Reads",
        "Counter": "0,1",
        "EventCode": "0x15",
        "EventName": "UNC_I_TRANSACTIONS.READS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Tracks only read requests (not including read prefetches).",
        "UMask": "0x1",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Inbound Transaction Count; Writes",
        "Counter": "0,1",
        "EventCode": "0x15",
        "EventName": "UNC_I_TRANSACTIONS.WRITES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of Inbound transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.; Trackes only write requests.  Each write request should have a prefetch, so there is no need to explicitly track these requests.  For writes that are tickled and have to retry, the counter will be incremented for each retry.",
        "UMask": "0x2",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "No AD Egress Credit Stalls",
        "Counter": "0,1",
        "EventCode": "0x18",
        "EventName": "UNC_I_TxR_AD_STALL_CREDIT_CYCLES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number times when it is not possible to issue a request to the R2PCIe because there are no AD Egress Credits available.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "No BL Egress Credit Stalls",
        "Counter": "0,1",
        "EventCode": "0x19",
        "EventName": "UNC_I_TxR_BL_STALL_CREDIT_CYCLES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number times when it is not possible to issue data to the R2PCIe because there are no BL Egress Credits available.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outbound Read Requests",
        "Counter": "0,1",
        "EventCode": "0xe",
        "EventName": "UNC_I_TxR_DATA_INSERTS_NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of requests issued to the switch (towards the devices).",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outbound Read Requests",
        "Counter": "0,1",
        "EventCode": "0xf",
        "EventName": "UNC_I_TxR_DATA_INSERTS_NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of requests issued to the switch (towards the devices).",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Outbound Request Queue Occupancy",
        "Counter": "0,1",
        "EventCode": "0xd",
        "EventName": "UNC_I_TxR_REQUEST_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Accumultes the number of outstanding outbound requests from the IRP to the switch (towards the devices).  This can be used in conjuection with the allocations event in order to calculate average latency of outbound requests.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Write Ordering Stalls",
        "Counter": "0,1",
        "EventCode": "0x1a",
        "EventName": "UNC_I_WRITE_ORDERING_STALL_CYCLES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are pending write ACK's in the switch but the switch->IRP pipeline is not utilized.",
        "Unit": "IRP"
    },
    {
        "BriefDescription": "Number of uclks in domain",
        "Counter": "0,1,2,3",
        "EventCode": "0x1",
        "EventName": "UNC_R2_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of uclks in the R2PCIe uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the R2PCIe is close to the Ubox, they generally should not diverge by more than a handful of cycles.",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credit Acquired; DRS",
        "Counter": "0,1",
        "EventCode": "0x33",
        "EventName": "UNC_R2_IIO_CREDITS_ACQUIRED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credit Acquired; NCB",
        "Counter": "0,1",
        "EventCode": "0x33",
        "EventName": "UNC_R2_IIO_CREDITS_ACQUIRED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCB message class.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credit Acquired; NCS",
        "Counter": "0,1",
        "EventCode": "0x33",
        "EventName": "UNC_R2_IIO_CREDITS_ACQUIRED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCS message class.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Failed to Acquire a Credit; DRS",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R2_IIO_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request pending in the BL Ingress attempted to acquire either a NCB or NCS credit to transmit into the IIO, but was rejected because no credits were available.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credits in Use; DRS",
        "Counter": "0,1",
        "EventCode": "0x32",
        "EventName": "UNC_R2_IIO_CREDITS_USED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credits in Use; NCB",
        "Counter": "0,1",
        "EventCode": "0x32",
        "EventName": "UNC_R2_IIO_CREDITS_USED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCB message class.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2PCIe IIO Credits in Use; NCS",
        "Counter": "0,1",
        "EventCode": "0x32",
        "EventName": "UNC_R2_IIO_CREDITS_USED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCS message class.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xCC",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise and Even on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise and Odd on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise and Even on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW_VR1_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 1.",
        "UMask": "0x40",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Counterclockwise and Odd on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CCW_VR1_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 1.",
        "UMask": "0x80",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x33",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise and Even on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise and Odd on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise and Even on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW_VR1_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 1.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AD Ring in Use; Clockwise and Odd on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x7",
        "EventName": "UNC_R2_RING_AD_USED.CW_VR1_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 1.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xCC",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise and Even on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise and Odd on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise and Even on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW_VR1_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 1.",
        "UMask": "0x40",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Counterclockwise and Odd on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CCW_VR1_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 1.",
        "UMask": "0x80",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x33",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise and Even on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise and Odd on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise and Even on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW_VR1_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 1.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 AK Ring in Use; Clockwise and Odd on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x8",
        "EventName": "UNC_R2_RING_AK_USED.CW_VR1_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 1.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xCC",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise and Even on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise and Odd on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise and Even on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW_VR1_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 1.",
        "UMask": "0x40",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Counterclockwise and Odd on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CCW_VR1_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 1.",
        "UMask": "0x80",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x33",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise and Even on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise and Odd on VRing 0",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise and Even on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW_VR1_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 1.",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 BL Ring in Use; Clockwise and Odd on VRing 1",
        "Counter": "0,1,2,3",
        "EventCode": "0x9",
        "EventName": "UNC_R2_RING_BL_USED.CW_VR1_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 1.",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Any",
        "Counter": "0,1,2,3",
        "EventCode": "0xA",
        "EventName": "UNC_R2_RING_IV_USED.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.; Filters any polarity",
        "UMask": "0xFF",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Counterclockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0xa",
        "EventName": "UNC_R2_RING_IV_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.; Filters for Counterclockwise polarity",
        "UMask": "0xCC",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Clockwise",
        "Counter": "0,1,2,3",
        "EventCode": "0xa",
        "EventName": "UNC_R2_RING_IV_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.; Filters for Clockwise polarity",
        "UMask": "0x33",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "AK Ingress Bounced",
        "EventCode": "0x12",
        "EventName": "UNC_R2_RxR_AK_BOUNCES",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when a request destined for the AK ingress bounced.",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "AK Ingress Bounced; Counterclockwise",
        "EventCode": "0x12",
        "EventName": "UNC_R2_RxR_AK_BOUNCES.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when a request destined for the AK ingress bounced.",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "AK Ingress Bounced; Clockwise",
        "EventCode": "0x12",
        "EventName": "UNC_R2_RxR_AK_BOUNCES.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when a request destined for the AK ingress bounced.",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; NCB",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_R2_RxR_CYCLES_NE.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; NCS",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_R2_RxR_CYCLES_NE.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Allocations; NCB",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R2_RxR_INSERTS.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the R2PCIe Ingress.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Allocations; NCS",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R2_RxR_INSERTS.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the R2PCIe Ingress.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; DRS",
        "EventCode": "0x13",
        "EventName": "UNC_R2_RxR_OCCUPANCY.DRS",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given R2PCIe Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the R2PCIe Ingress Not Empty event to calculate average occupancy or the R2PCIe Ingress Allocations event in order to calculate average queuing latency.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Full; AD",
        "EventCode": "0x25",
        "EventName": "UNC_R2_TxR_CYCLES_FULL.AD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress buffer is full.; AD Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Full; AK",
        "EventCode": "0x25",
        "EventName": "UNC_R2_TxR_CYCLES_FULL.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress buffer is full.; AK Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Full; BL",
        "EventCode": "0x25",
        "EventName": "UNC_R2_TxR_CYCLES_FULL.BL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress buffer is full.; BL Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Not Empty; AD",
        "EventCode": "0x23",
        "EventName": "UNC_R2_TxR_CYCLES_NE.AD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; AD Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Not Empty; AK",
        "EventCode": "0x23",
        "EventName": "UNC_R2_TxR_CYCLES_NE.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; AK Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress Cycles Not Empty; BL",
        "EventCode": "0x23",
        "EventName": "UNC_R2_TxR_CYCLES_NE.BL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; BL Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; AD CCW",
        "Counter": "0,1",
        "EventCode": "0x28",
        "EventName": "UNC_R2_TxR_NACK_CCW.AD",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; AK CCW",
        "Counter": "0,1",
        "EventCode": "0x28",
        "EventName": "UNC_R2_TxR_NACK_CCW.AK",
        "PerPkg": "1",
        "PublicDescription": "AK CounterClockwise Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CCW NACK; BL CCW",
        "Counter": "0,1",
        "EventCode": "0x28",
        "EventName": "UNC_R2_TxR_NACK_CCW.BL",
        "PerPkg": "1",
        "PublicDescription": "BL CounterClockwise Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CW NACK; AD CW",
        "Counter": "0,1",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.AD",
        "PerPkg": "1",
        "PublicDescription": "AD Clockwise Egress Queue",
        "UMask": "0x1",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CW NACK; AK CW",
        "Counter": "0,1",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.AK",
        "PerPkg": "1",
        "PublicDescription": "AK Clockwise Egress Queue",
        "UMask": "0x2",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Egress CW NACK; BL CW",
        "Counter": "0,1",
        "EventCode": "0x26",
        "EventName": "UNC_R2_TxR_NACK_CW.BL",
        "PerPkg": "1",
        "PublicDescription": "BL Clockwise Egress Queue",
        "UMask": "0x4",
        "Unit": "R2PCIe"
    },
    {
        "BriefDescription": "Number of uclks in domain",
        "Counter": "0,1,2",
        "EventCode": "0x1",
        "EventName": "UNC_R3_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of uclks in the QPI uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the QPI Agent is close to the Ubox, they generally should not diverge by more than a handful of cycles.",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO10",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 10",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO11",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 11",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO12",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 12",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO13",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 13",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO14",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 14&16",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO8",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 8",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2c",
        "EventName": "UNC_R3_C_HI_AD_CREDITS_EMPTY.CBO9",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 9",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO0",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 0",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO1",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 1",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO2",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 2",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO3",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 3",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO4",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 4",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO5",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 5",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO6",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 6",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "CBox AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2b",
        "EventName": "UNC_R3_C_LO_AD_CREDITS_EMPTY.CBO7",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 7",
        "UMask": "0x80",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2f",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.HA0",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; HA0",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2f",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.HA1",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; HA1",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2f",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.R2_NCB",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; R2 NCB Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "HA/R2 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2f",
        "EventName": "UNC_R3_HA_R2_BL_CREDITS_EMPTY.R2_NCS",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to either HA or R2 on the BL Ring; R2 NCS Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN0_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN0 HOM Messages",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN0_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN0 NDR Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN0_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN0 SNP Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x29",
        "EventName": "UNC_R3_QPI0_AD_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the AD Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN0_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN0 HOM Messages",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN0_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN0 NDR Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN0_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN0 SNP Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI0 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2d",
        "EventName": "UNC_R3_QPI0_BL_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI0 on the BL Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN0_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN0 HOM Messages",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN0_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN0 NDR Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN0_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN0 SNP Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 AD Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2a",
        "EventName": "UNC_R3_QPI1_AD_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the AD Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN0_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN0 HOM Messages",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN0_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN0 NDR Messages",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN0_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN0 SNP Messages",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN1_HOM",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN1 HOM Messages",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN1_NDR",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN1 NDR Messages",
        "UMask": "0x40",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VN1_SNP",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VN1 SNP Messages",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "QPI1 BL Credits Empty",
        "Counter": "0,1",
        "EventCode": "0x2e",
        "EventName": "UNC_R3_QPI1_BL_CREDITS_EMPTY.VNA",
        "PerPkg": "1",
        "PublicDescription": "No credits available to send to QPI1 on the BL Ring; VNA",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Counterclockwise",
        "Counter": "0,1,2",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xCC",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Counterclockwise and Even on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CCW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Counterclockwise and Odd on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CCW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Clockwise",
        "Counter": "0,1,2",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x33",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Clockwise and Even on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AD Ring in Use; Clockwise and Odd on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x7",
        "EventName": "UNC_R3_RING_AD_USED.CW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Counterclockwise",
        "Counter": "0,1,2",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xCC",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Counterclockwise and Even on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CCW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Counterclockwise and Odd on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CCW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Clockwise",
        "Counter": "0,1,2",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x33",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Clockwise and Even on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 AK Ring in Use; Clockwise and Odd on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x8",
        "EventName": "UNC_R3_RING_AK_USED.CW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Counterclockwise",
        "Counter": "0,1,2",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xCC",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Counterclockwise and Even on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CCW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Counterclockwise and Odd on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CCW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Clockwise",
        "Counter": "0,1,2",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x33",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Clockwise and Even on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CW_VR0_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity on Virtual Ring 0.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R3 BL Ring in Use; Clockwise and Odd on VRing 0",
        "Counter": "0,1,2",
        "EventCode": "0x9",
        "EventName": "UNC_R3_RING_BL_USED.CW_VR0_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity on Virtual Ring 0.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Any",
        "Counter": "0,1,2",
        "EventCode": "0xA",
        "EventName": "UNC_R3_RING_IV_USED.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.; Filters any polarity",
        "UMask": "0xFF",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Counterclockwise",
        "Counter": "0,1,2",
        "EventCode": "0xa",
        "EventName": "UNC_R3_RING_IV_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.; Filters for Counterclockwise polarity",
        "UMask": "0xCC",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "R2 IV Ring in Use; Clockwise",
        "Counter": "0,1,2",
        "EventCode": "0xa",
        "EventName": "UNC_R3_RING_IV_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.; Filters for Clockwise polarity",
        "UMask": "0x33",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "AD Ingress Bypassed",
        "Counter": "0,1",
        "EventCode": "0x12",
        "EventName": "UNC_R3_RxR_AD_BYPASSED",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when the AD Ingress was bypassed and an incoming transaction was bypassed directly across the BGF and into the qfclk domain.",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Bypassed",
        "Counter": "0,1",
        "EventCode": "0x12",
        "EventName": "UNC_R3_RxR_BYPASSED.AD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when the Ingress was bypassed and an incoming transaction was bypassed directly across the BGF and into the qfclk domain.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; HOM",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_R3_RxR_CYCLES_NE.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; NDR",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_R3_RxR_CYCLES_NE.NDR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Cycles Not Empty; SNP",
        "Counter": "0,1",
        "EventCode": "0x10",
        "EventName": "UNC_R3_RxR_CYCLES_NE.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; DRS",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.DRS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; HOM",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; NCB",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.NCB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; NCS",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.NCS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; NDR",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.NDR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Allocations; SNP",
        "Counter": "0,1",
        "EventCode": "0x11",
        "EventName": "UNC_R3_RxR_INSERTS.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; DRS",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY.DRS",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.; DRS Ingress Queue",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; HOM",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY.HOM",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.; HOM Ingress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; NCB",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY.NCB",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.; NCB Ingress Queue",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; NCS",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY.NCS",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.; NCS Ingress Queue",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; NDR",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY.NDR",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.; NDR Ingress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Ingress Occupancy Accumulator; SNP",
        "EventCode": "0x13",
        "EventName": "UNC_R3_RxR_OCCUPANCY.SNP",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.; SNP Ingress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress NACK; AK CCW",
        "Counter": "0,1",
        "EventCode": "0x28",
        "EventName": "UNC_R3_TxR_NACK_CCW.AD",
        "PerPkg": "1",
        "PublicDescription": "BL CounterClockwise Egress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress NACK; BL CW",
        "Counter": "0,1",
        "EventCode": "0x28",
        "EventName": "UNC_R3_TxR_NACK_CCW.AK",
        "PerPkg": "1",
        "PublicDescription": "AD Clockwise Egress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress NACK; BL CCW",
        "Counter": "0,1",
        "EventCode": "0x28",
        "EventName": "UNC_R3_TxR_NACK_CCW.BL",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress NACK; AD CW",
        "Counter": "0,1",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK_CW.AD",
        "PerPkg": "1",
        "PublicDescription": "AD Clockwise Egress Queue",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress NACK; AD CCW",
        "Counter": "0,1",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK_CW.AK",
        "PerPkg": "1",
        "PublicDescription": "AD CounterClockwise Egress Queue",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Egress NACK; AK CW",
        "Counter": "0,1",
        "EventCode": "0x26",
        "EventName": "UNC_R3_TxR_NACK_CW.BL",
        "PerPkg": "1",
        "PublicDescription": "BL Clockwise Egress Queue",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; DRS Message Class",
        "Counter": "0,1",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; NCB Message Class",
        "Counter": "0,1",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; NCS Message Class",
        "Counter": "0,1",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; NDR Message Class",
        "Counter": "0,1",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Acquisition Failed on DRS; SNP Message Class",
        "Counter": "0,1",
        "EventCode": "0x37",
        "EventName": "UNC_R3_VN0_CREDITS_REJECT.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; DRS Message Class",
        "Counter": "0,1",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; NCB Message Class",
        "Counter": "0,1",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; NCS Message Class",
        "Counter": "0,1",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; NDR Message Class",
        "Counter": "0,1",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN0 Credit Used; SNP Message Class",
        "Counter": "0,1",
        "EventCode": "0x36",
        "EventName": "UNC_R3_VN0_CREDITS_USED.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; DRS Message Class",
        "Counter": "0,1",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; NCB Message Class",
        "Counter": "0,1",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; NCS Message Class",
        "Counter": "0,1",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; NDR Message Class",
        "Counter": "0,1",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Acquisition Failed on DRS; SNP Message Class",
        "Counter": "0,1",
        "EventCode": "0x39",
        "EventName": "UNC_R3_VN1_CREDITS_REJECT.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; DRS Message Class",
        "Counter": "0,1",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; NCB Message Class",
        "Counter": "0,1",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; NCS Message Class",
        "Counter": "0,1",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; NDR Message Class",
        "Counter": "0,1",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VN1 Credit Used; SNP Message Class",
        "Counter": "0,1",
        "EventCode": "0x38",
        "EventName": "UNC_R3_VN1_CREDITS_USED.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA credit Acquisitions",
        "Counter": "0,1",
        "EventCode": "0x33",
        "EventName": "UNC_R3_VNA_CREDITS_ACQUIRED",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credits from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA credit Acquisitions; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x33",
        "EventName": "UNC_R3_VNA_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credits from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA credit Acquisitions; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x33",
        "EventName": "UNC_R3_VNA_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credits from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; DRS Message Class",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.DRS",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS.",
        "UMask": "0x8",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; HOM Message Class",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.HOM",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses.",
        "UMask": "0x1",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; NCB Message Class",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.NCB",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns.",
        "UMask": "0x10",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; NCS Message Class",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.NCS",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Non-Coherent Standard (NCS).",
        "UMask": "0x20",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; NDR Message Class",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.NDR",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP).",
        "UMask": "0x4",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VNA Credit Reject; SNP Message Class",
        "Counter": "0,1",
        "EventCode": "0x34",
        "EventName": "UNC_R3_VNA_CREDITS_REJECT.SNP",
        "PerPkg": "1",
        "PublicDescription": "Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class.",
        "UMask": "0x2",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Cycles with no VNA credits available",
        "Counter": "0,1",
        "EventCode": "0x31",
        "EventName": "UNC_R3_VNA_CREDIT_CYCLES_OUT",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI uclk cycles when the transmitted has no VNA credits available and therefore cannot send any requests on this channel.  Note that this does not mean that no flits can be transmitted, as those holding VN0 credits will still (potentially) be able to transmit.  Generally it is the goal of the uncore that VNA credits should not run out, as this can substantially throttle back useful QPI bandwidth.",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "Cycles with 1 or more VNA credits in use",
        "Counter": "0,1",
        "EventCode": "0x32",
        "EventName": "UNC_R3_VNA_CREDIT_CYCLES_USED",
        "PerPkg": "1",
        "PublicDescription": "Number of QPI uclk cycles with one or more VNA credits in use.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average number of used VNA credits.",
        "Unit": "R3QPI"
    },
    {
        "BriefDescription": "VLW Received",
        "Counter": "0,1",
        "EventCode": "0x42",
        "EventName": "UNC_U_EVENT_MSG.DOORBELL_RCVD",
        "PerPkg": "1",
        "PublicDescription": "Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x8",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "VLW Received",
        "Counter": "0,1",
        "EventCode": "0x42",
        "EventName": "UNC_U_EVENT_MSG.INT_PRIO",
        "PerPkg": "1",
        "PublicDescription": "Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x10",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "VLW Received",
        "Counter": "0,1",
        "EventCode": "0x42",
        "EventName": "UNC_U_EVENT_MSG.IPI_RCVD",
        "PerPkg": "1",
        "PublicDescription": "Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x4",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "VLW Received",
        "Counter": "0,1",
        "EventCode": "0x42",
        "EventName": "UNC_U_EVENT_MSG.MSI_RCVD",
        "PerPkg": "1",
        "PublicDescription": "Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x2",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "VLW Received",
        "Counter": "0,1",
        "EventCode": "0x42",
        "EventName": "UNC_U_EVENT_MSG.VLW_RCVD",
        "PerPkg": "1",
        "PublicDescription": "Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "Counter": "0,1",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.DISABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x2",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "Counter": "0,1",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.ENABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "Counter": "0,1",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.U2C_DISABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x8",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Filter Match",
        "Counter": "0,1",
        "EventCode": "0x41",
        "EventName": "UNC_U_FILTER_MATCH.U2C_ENABLE",
        "PerPkg": "1",
        "PublicDescription": "Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.",
        "UMask": "0x4",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "IDI Lock/SplitLock Cycles",
        "Counter": "0,1",
        "EventCode": "0x44",
        "EventName": "UNC_U_LOCK_CYCLES",
        "PerPkg": "1",
        "PublicDescription": "Number of times an IDI Lock/SplitLock sequence was started",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Cycles PHOLD Assert to Ack; Assert to ACK",
        "Counter": "0,1",
        "EventCode": "0x45",
        "EventName": "UNC_U_PHOLD_CYCLES.ASSERT_TO_ACK",
        "PerPkg": "1",
        "PublicDescription": "PHOLD cycles.  Filter from source CoreID.",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "RACU Request",
        "Counter": "0,1",
        "EventCode": "0x46",
        "EventName": "UNC_U_RACU_REQUESTS",
        "PerPkg": "1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Correctable Machine Check",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.CMC",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores",
        "UMask": "0x10",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Livelock",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.LIVELOCK",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x4",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; LTError",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.LTERROR",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x8",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Monitor T0",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.MONITOR_T0",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x1",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Monitor T1",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.MONITOR_T1",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; Filter by core",
        "UMask": "0x2",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Other",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.OTHER",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores; PREQ, PSMI, P2U, Thermal, PCUSMI, PMI",
        "UMask": "0x80",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Trap",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.TRAP",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores",
        "UMask": "0x40",
        "Unit": "UBOX"
    },
    {
        "BriefDescription": "Monitor Sent to T0; Uncorrectable Machine Check",
        "Counter": "0,1",
        "EventCode": "0x43",
        "EventName": "UNC_U_U2C_EVENTS.UMC",
        "PerPkg": "1",
        "PublicDescription": "Events coming from Uncore can be sent to one or all cores",
        "UMask": "0x20",
        "Unit": "UBOX"
    }
]
